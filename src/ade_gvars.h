/*****************************************************/
/************      ade_gvar.h      *******************/
/*****************************************************/
/*  Global variables for Z80 Computer Emulator  */
/*                       (ADE)                       */
/*                       GPL V2                      */
/*      Copyright (C) 1995  Frank D. Cringle.        */
/*      Copyright (C) 1996-Present Jack Strangio     */
/*                                                   */
/*****************************************************/
/********************************************************************************/
/*   Parts of this file are from yaze - yet another Z80 emulator.               */
/*   This file is part of nse  - North Star Horizon emulator.                   */
/*                                                                              */
/*  This is free software; you can redistribute it and/or modify it under       */
/*   the terms of the GNU General Public License as published by the Free       */
/*   Software Foundation; either version 2 of the License, or (at your          */
/*   option) any later version.                                                 */
/*                                                                              */
/*   This program is distributed in the hope that it will be useful, but        */
/*   WITHOUT ANY WARRANTY; without even the implied warranty of                 */
/*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          */
/*   General Public License for more details.                                   */
/*                                                                              */
/*   You should have received a copy of the GNU General Public License          */
/*   along with this program; if not, write to the Free Software                */
/*   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
/*                                                                              */
/********************************************************************************/


struct sio siotab[MAXPSTR] = {
  {NULL, NULL, "conin", 0, ST_IN2},
  {NULL, NULL, "conout", 0, ST_OUT2},
  {NULL, NULL, "sio_in", 0, ST_IN},
  {NULL, NULL, "sio_out", 0, ST_OUT},
  {NULL, NULL, "pio_in", 0, ST_IN},
  {NULL, NULL, "pio_out", 0, ST_OUT},
  {NULL, NULL, "sio_dev", 0, ST_IN},
  {NULL, NULL, "sio_dev", 0, ST_OUT},
  {NULL, NULL, "pio_dev", 0, ST_IN},
  {NULL, NULL, "pio_dev", 0, ST_OUT}
};


unsigned char adv_prom_0000_0800[0x800] = {
0x31, 0x17, 0x00, 0xf5, 0xc5, 0xd5, 0xe5, 0xd9, 0x08, 0xf5, 0xc5, 0xd5, 0xe5, 0xdd, 0xe5, 0xfd,
0xe5, 0xed, 0x57, 0xf5, 0xfd, 0x21, 0x00, 0x00, 0xfd, 0x39, 0x3e, 0xfc, 0xd3, 0xa2, 0xc3, 0x21,
0x80, 0xf3, 0x3e, 0x28, 0xd3, 0xf8, 0xaf, 0xe3, 0x10, 0xfd, 0x3d, 0x20, 0xfa, 0x01, 0xa0, 0x0f,
0x3e, 0x3f, 0xd3, 0xf8, 0xdb, 0xe0, 0xe6, 0x08, 0x20, 0xe8, 0x0b, 0x78, 0xb1, 0x20, 0xf5, 0xd3,
0xc0, 0x18, 0x28, 0x4c, 0x4f, 0x41, 0x44, 0x20, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x1f, 0x80,
0x80, 0x40, 0x0c, 0x10, 0x16, 0xb7, 0x10, 0x16, 0x05, 0xff, 0x10, 0x16, 0x04, 0x01, 0x05, 0xff,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x98, 0x3e, 0xf8, 0xd3, 0xa0, 0x3c,
0xd3, 0xa1, 0x31, 0x00, 0x02, 0xcd, 0xbd, 0x82, 0xd3, 0xa3, 0xd3, 0x90, 0xd3, 0xb0, 0x3e, 0x18,
0xd3, 0xf8, 0xdb, 0x73, 0xe6, 0xf8, 0xd6, 0xe8, 0x32, 0xfd, 0x02, 0x20, 0x11, 0x3e, 0x7e, 0xcd,
0x74, 0x82, 0x3e, 0xce, 0xd3, 0x31, 0x3e, 0x37, 0xd3, 0x31, 0xdb, 0x30, 0xdb, 0x30, 0x21, 0x43,
0x80, 0x0e, 0x0c, 0x46, 0xcd, 0x6c, 0x83, 0x23, 0x0d, 0x20, 0xf8, 0x21, 0x6b, 0x80, 0xe5, 0xdb,
0x83, 0xcd, 0x25, 0x83, 0xfe, 0x44, 0x28, 0x0b, 0xfe, 0x53, 0xca, 0xe3, 0x81, 0xd6, 0x0d, 0xc0,
0x3c, 0x18, 0x19, 0xcd, 0x25, 0x83, 0xfe, 0x31, 0xd8, 0xfe, 0x35, 0xd0, 0xd6, 0x30, 0x47, 0xaf,
0x37, 0x17, 0x10, 0xfd, 0x57, 0xcd, 0x25, 0x83, 0xfe, 0x0d, 0xc0, 0x7a, 0xd9, 0x4f, 0xd9, 0x3e,
0x1d, 0xd3, 0xf8, 0x3e, 0x02, 0xd3, 0x60, 0x06, 0x0a, 0x3e, 0xa0, 0xcd, 0x8f, 0x81, 0xdb, 0xe0,
0xe6, 0x20, 0x28, 0x03, 0x10, 0xf3, 0xc9, 0x06, 0x64, 0x3e, 0x80, 0xcd, 0x8f, 0x81, 0xdb, 0xe0,
0xe6, 0x20, 0x20, 0x03, 0x10, 0xf3, 0xc9, 0x06, 0x04, 0xd3, 0x82, 0x3e, 0x7d, 0xcd, 0x9e, 0x81,
0xdb, 0x82, 0x3e, 0x7d, 0xcd, 0x9e, 0x81, 0x10, 0xf0, 0xd9, 0x06, 0x28, 0xd9, 0x21, 0x4e, 0x81,
0xdb, 0x82, 0xd9, 0x05, 0xd9, 0xc8, 0x06, 0x20, 0x0b, 0x78, 0xb1, 0xc8, 0xdb, 0xe0, 0xe6, 0x40,
0x28, 0xf6, 0x06, 0x20, 0x0b, 0x78, 0xb1, 0xc8, 0xdb, 0xe0, 0xe6, 0x40, 0x20, 0xf6, 0xdb, 0xd0,
0xe6, 0x0f, 0xfe, 0x03, 0x20, 0xe2, 0x3e, 0x04, 0x1e, 0x00, 0x06, 0xff, 0x18, 0x59, 0xdb, 0x80,
0xfe, 0xc0, 0xd8, 0xfe, 0xf9, 0xd0, 0x57, 0x12, 0x13, 0x07, 0x4f, 0x21, 0x65, 0x81, 0xdb, 0x80,
0x12, 0x13, 0xa9, 0x07, 0x4f, 0xdb, 0x80, 0x12, 0xa9, 0x07, 0x4f, 0x13, 0xdb, 0x80, 0x12, 0xa9,
0x07, 0x4f, 0x13, 0x10, 0xf0, 0xdb, 0x80, 0xa9, 0xdb, 0x82, 0x20, 0xa1, 0x08, 0x3d, 0x20, 0x27,
0x21, 0x0a, 0xf8, 0x19, 0xd3, 0xa0, 0xd3, 0xa1, 0x7e, 0xfe, 0xc3, 0xc2, 0x6b, 0x80, 0xe9, 0xd9,
0xb1, 0xd9, 0xd3, 0x81, 0xf6, 0x10, 0xd3, 0x81, 0xee, 0x10, 0xd3, 0x81, 0x3e, 0x28, 0x0e, 0xfa,
0x0d, 0x20, 0xfd, 0x3d, 0x20, 0xf8, 0xc9, 0x08, 0xdb, 0xe0, 0xe6, 0x40, 0x20, 0xfa, 0xdb, 0xe0,
0xe6, 0x40, 0x28, 0xfa, 0x3e, 0x64, 0x3d, 0x20, 0xfd, 0x3e, 0x15, 0xd3, 0xf8, 0xd3, 0x82, 0x3e,
0x18, 0x3d, 0x20, 0xfd, 0x3e, 0x1d, 0xd3, 0xf8, 0x78, 0x01, 0xe0, 0x64, 0xed, 0x70, 0xfa, 0xd6,
0x81, 0x10, 0xf9, 0xc3, 0x1d, 0x81, 0x47, 0xdb, 0x81, 0xfe, 0xfb, 0xc2, 0x1d, 0x81, 0xdb, 0x80,
0x0e, 0x00, 0xe9, 0xdb, 0x73, 0xe6, 0xf8, 0xfe, 0xf0, 0xc0, 0xcd, 0x25, 0x83, 0xfe, 0x0d, 0xc0,
0x3e, 0x00, 0xcd, 0x74, 0x82, 0x06, 0x04, 0x50, 0xed, 0xb3, 0xdb, 0x30, 0xdb, 0x30, 0xcd, 0x82,
0x83, 0x48, 0x0b, 0x78, 0xb1, 0x20, 0x04, 0x7a, 0xfe, 0x03, 0xd0, 0xdb, 0x31, 0xe6, 0x02, 0x28,
0xf1, 0xdb, 0x30, 0xbe, 0x20, 0xec, 0x23, 0x15, 0x20, 0xe8, 0x42, 0x10, 0xfe, 0x15, 0x20, 0xfb,
0x0e, 0x06, 0x46, 0xcd, 0x82, 0x83, 0x23, 0x0d, 0x20, 0xf8, 0xcd, 0x6b, 0x82, 0xfe, 0x02, 0x20,
0xf9, 0xcd, 0x6b, 0x82, 0x57, 0x1e, 0x00, 0x43, 0xdd, 0x21, 0x0a, 0x00, 0xdd, 0x19, 0x21, 0x01,
0x00, 0x12, 0x13, 0x4f, 0x09, 0xcd, 0x6b, 0x82, 0xfe, 0x10, 0x20, 0xf5, 0xcd, 0x6b, 0x82, 0xfe,
0x16, 0x28, 0xf2, 0xfe, 0x03, 0x20, 0xea, 0xcd, 0x6b, 0x82, 0xbd, 0xc0, 0xcd, 0x6b, 0x82, 0xbc,
0xc0, 0xcd, 0x6b, 0x82, 0xaf, 0xd3, 0xa0, 0xd3, 0xa1, 0xdd, 0xe9, 0xdb, 0x31, 0xe6, 0x02, 0x28,
0xfa, 0xdb, 0x30, 0xc9, 0x21, 0x4f, 0x80, 0x01, 0x31, 0x03, 0xed, 0xb3, 0x10, 0xfe, 0xd3, 0x38,
0xc9, 0x3a, 0xfd, 0x02, 0xb7, 0xc0, 0x18, 0xa2, 0x06, 0x2a, 0xcd, 0x6c, 0x83, 0xcd, 0x25, 0x83,
0xfe, 0x44, 0x28, 0x4f, 0xfe, 0x4a, 0xca, 0xcb, 0x83, 0xfe, 0x49, 0x28, 0x7e, 0xfe, 0x4f, 0x28,
0x73, 0xfe, 0x51, 0xca, 0x6b, 0x80, 0xfe, 0x52, 0xcc, 0x81, 0x82, 0x31, 0x00, 0x02, 0xcd, 0xb3,
0x82, 0x18, 0xd5, 0x3a, 0xf1, 0x00, 0xfe, 0xe6, 0x06, 0x1f, 0xc2, 0x6c, 0x83, 0xd9, 0xaf, 0x26,
0x4f, 0x2e, 0xf0, 0x2d, 0x77, 0x20, 0xfc, 0x25, 0x20, 0xf7, 0x77, 0x2d, 0x20, 0xfc, 0x21, 0x61,
0x85, 0x22, 0xf2, 0x00, 0x21, 0xf0, 0x02, 0x22, 0xf8, 0x00, 0x01, 0xff, 0x0a, 0x71, 0x2c, 0x10,
0xfc, 0xd9, 0xc9, 0xcd, 0x91, 0x83, 0xed, 0x43, 0xfe, 0x02, 0x2a, 0xfe, 0x02, 0x46, 0x23, 0x22,
0xfe, 0x02, 0xcd, 0xd3, 0x83, 0x06, 0x2d, 0xcd, 0x6c, 0x83, 0xcd, 0x25, 0x83, 0xfe, 0x20, 0x20,
0x05, 0xcd, 0x6c, 0x83, 0x18, 0xe4, 0xfe, 0x0d, 0x28, 0xa1, 0xcd, 0x9f, 0x83, 0x2a, 0xfe, 0x02,
0x2b, 0x71, 0x18, 0xd6, 0xcd, 0x91, 0x83, 0xed, 0x41, 0x18, 0x90, 0xcd, 0x9c, 0x83, 0xed, 0x40,
0xcd, 0xd3, 0x83, 0x18, 0x86, 0x3a, 0xfd, 0x02, 0xb7, 0x28, 0x61, 0xdb, 0xd0, 0xcb, 0x77, 0x28,
0xfa, 0x47, 0x3e, 0x19, 0xd3, 0xf8, 0xdb, 0xd0, 0xa8, 0xf2, 0x36, 0x83, 0xdb, 0xd0, 0xe6, 0x0f,
0x4f, 0x3e, 0x1a, 0xd3, 0xf8, 0xdb, 0xd0, 0xa8, 0xfa, 0x45, 0x83, 0xdb, 0xd0, 0x87, 0x87, 0x87,
0x87, 0x81, 0x01, 0xf8, 0x18, 0xed, 0x41, 0x0d, 0x20, 0xfd, 0x10, 0xfb, 0xfe, 0xff, 0x28, 0x03,
0x32, 0xff, 0x03, 0x3a, 0xff, 0x03, 0x47, 0xfe, 0x03, 0xca, 0xab, 0x82, 0x78, 0xd9, 0xdd, 0x21,
0xf0, 0x00, 0x21, 0x7b, 0x83, 0x22, 0xf6, 0x00, 0xc3, 0x83, 0x84, 0xd9, 0x3a, 0xfd, 0x02, 0xb7,
0x78, 0xc0, 0xdb, 0x31, 0xe6, 0x01, 0x28, 0xfa, 0x78, 0xd3, 0x30, 0xc9, 0xcd, 0x6b, 0x82, 0x18,
0xd5, 0xcd, 0x25, 0x83, 0x6f, 0xcd, 0x25, 0x83, 0x67, 0x22, 0xfc, 0x00, 0xcd, 0x25, 0x83, 0x6f,
0xcd, 0x25, 0x83, 0x67, 0x22, 0xfe, 0x00, 0x21, 0xfc, 0x00, 0x06, 0x04, 0x7e, 0xd6, 0x30, 0xfe,
0x0a, 0x38, 0x02, 0xd6, 0x07, 0xcb, 0x40, 0x20, 0x07, 0x87, 0x87, 0x87, 0x87, 0x4f, 0x18, 0x02,
0x81, 0x77, 0x23, 0x10, 0xe7, 0x2b, 0x4e, 0x2b, 0x2b, 0x46, 0xc9, 0xcd, 0x91, 0x83, 0x21, 0xab,
0x82, 0xc5, 0xc9, 0x3a, 0xf0, 0x00, 0xfe, 0x4b, 0x48, 0x38, 0x18, 0xcd, 0xb3, 0x82, 0x04, 0xcd,
0x6c, 0x83, 0xcd, 0x6c, 0x83, 0x2a, 0xfe, 0x02, 0x2b, 0x59, 0x4c, 0xcd, 0xf8, 0x83, 0x4d, 0xcd,
0xf8, 0x83, 0x4b, 0x06, 0x20, 0xcd, 0x6c, 0x83, 0x16, 0x02, 0x79, 0xe6, 0xf0, 0x0f, 0x0f, 0x0f,
0x0f, 0xc6, 0x30, 0xfe, 0x3a, 0x38, 0x02, 0xc6, 0x07, 0x47, 0xcd, 0x6c, 0x83, 0x79, 0xe6, 0x0f,
0x15, 0x20, 0xee, 0xc9, 0xd6, 0x20, 0x4f, 0xaf, 0x47, 0xdd, 0x66, 0x03, 0xdd, 0x6e, 0x02, 0x09,
0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0xdd, 0x56, 0x00, 0xdd, 0x5e, 0x01, 0xdd, 0x7e, 0x0a, 0x12,
0x1c, 0x01, 0x02, 0x07, 0xcb, 0x7e, 0x28, 0x0a, 0x12, 0x1c, 0x0d, 0xcb, 0x76, 0x28, 0x03, 0x12,
0x1c, 0x0d, 0x7e, 0xe6, 0x3f, 0xdd, 0xae, 0x0a, 0x12, 0x23, 0x1c, 0x10, 0xf5, 0xdd, 0x7e, 0x0a,
0x0d, 0xfa, 0x58, 0x84, 0x12, 0x1c, 0x18, 0xf8, 0x0e, 0x0c, 0x18, 0x35, 0x7d, 0x93, 0xd6, 0x10,
0x28, 0x0e, 0x4f, 0x26, 0x4f, 0x41, 0xaf, 0x6b, 0x77, 0x2c, 0x10, 0xfc, 0x25, 0xf2, 0x65, 0x84,
0xeb, 0x2d, 0x5d, 0x06, 0x0a, 0xaf, 0x6b, 0x77, 0x2d, 0x10, 0xfc, 0x24, 0x7c, 0xfe, 0x50, 0x20,
0xf2, 0x18, 0x73, 0xe6, 0x7f, 0xfe, 0x7f, 0xca, 0x1d, 0x85, 0xfe, 0x20, 0x30, 0x86, 0x4f, 0x18,
0x67, 0x79, 0xdd, 0x66, 0x05, 0xdd, 0x6e, 0x04, 0xfe, 0x0d, 0x28, 0x2b, 0xfe, 0x0a, 0x28, 0x43,
0xfe, 0x0c, 0x28, 0x2f, 0xfe, 0x1f, 0x28, 0x35, 0xfe, 0x0e, 0x28, 0xc4, 0xfe, 0x0f, 0x28, 0xac,
0xfe, 0x18, 0x28, 0x17, 0xfe, 0x19, 0x28, 0x17, 0xfe, 0x08, 0x28, 0x68, 0xfe, 0x0b, 0x28, 0x71,
0xfe, 0x1e, 0x20, 0x32, 0xdd, 0x75, 0x01, 0xaf, 0x0c, 0x18, 0x13, 0xcb, 0x84, 0x18, 0x24, 0xcb,
0xc4, 0x18, 0x20, 0x7a, 0x3c, 0xfe, 0x50, 0x20, 0x05, 0xcb, 0x4c, 0x20, 0x19, 0xaf, 0xdd, 0x77,
0x00, 0x20, 0x13, 0xdd, 0x73, 0x01, 0xcb, 0xfc, 0x7d, 0xc6, 0x0a, 0x4f, 0xc6, 0xe6, 0x93, 0x20,
0x05, 0x18, 0x4e, 0xdd, 0x74, 0x05, 0xcb, 0xf9, 0xdd, 0x56, 0x00, 0xdd, 0x5e, 0x01, 0x06, 0x0a,
0xdd, 0xcb, 0x05, 0x46, 0x28, 0x05, 0x7b, 0x80, 0x5f, 0x18, 0x0d, 0xdd, 0x66, 0x09, 0xdd, 0x6e,
0x08, 0x1a, 0xae, 0x12, 0x23, 0x1c, 0x10, 0xf9, 0xcb, 0x79, 0xca, 0x91, 0x84, 0xdd, 0x6e, 0x06,
0xdd, 0x66, 0x07, 0xe9, 0x7a, 0x3d, 0xf2, 0xc8, 0x84, 0xcb, 0x4c, 0x20, 0xc9, 0xdd, 0x36, 0x00,
0x4f, 0x7b, 0xd6, 0x14, 0xdd, 0x77, 0x01, 0x5f, 0x7d, 0xd6, 0x0a, 0xbb, 0x20, 0xb8, 0xcb, 0xf4,
0x4b, 0x16, 0x50, 0x6b, 0x06, 0x0a, 0x15, 0xaf, 0x12, 0x1c, 0x10, 0xfc, 0x5d, 0xb2, 0x20, 0xf4,
0xdd, 0x71, 0x04, 0xcb, 0x54, 0x20, 0x9c, 0x79, 0xd3, 0x90, 0x18, 0x9a, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x14,
0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x14, 0x14, 0x3e, 0x14, 0x3e, 0x14, 0x14, 0x08, 0x1e, 0x28,
0x1c, 0x0a, 0x3c, 0x08, 0x32, 0x32, 0x04, 0x08, 0x10, 0x26, 0x26, 0x10, 0x28, 0x28, 0x10, 0x2a,
0x24, 0x1a, 0x08, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x10, 0x10, 0x10, 0x08, 0x04,
0x10, 0x08, 0x04, 0x04, 0x04, 0x08, 0x10, 0x08, 0x2a, 0x1c, 0x08, 0x1c, 0x2a, 0x08, 0x00, 0x08,
0x08, 0x3e, 0x08, 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x00, 0x00, 0x00, 0x3e,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x02, 0x02, 0x04, 0x08, 0x10, 0x20,
0x20, 0x1c, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x1c, 0x08, 0x18, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x1c,
0x22, 0x02, 0x0c, 0x10, 0x20, 0x3e, 0x3e, 0x02, 0x04, 0x0c, 0x02, 0x22, 0x1c, 0x04, 0x0c, 0x14,
0x24, 0x3e, 0x04, 0x04, 0x3e, 0x20, 0x3c, 0x02, 0x02, 0x22, 0x1c, 0x0c, 0x10, 0x20, 0x3c, 0x22,
0x22, 0x1c, 0x3e, 0x02, 0x04, 0x08, 0x10, 0x20, 0x20, 0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c,
0x1c, 0x22, 0x22, 0x1e, 0x02, 0x04, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x80, 0x08,
0x00, 0x00, 0x08, 0x08, 0x10, 0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00, 0x00, 0x3e, 0x00,
0x3e, 0x00, 0x00, 0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x1c, 0x22, 0x04, 0x08, 0x08, 0x00,
0x08, 0x1c, 0x22, 0x2e, 0x2a, 0x2e, 0x20, 0x1e, 0x1c, 0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x3c,
0x22, 0x22, 0x3c, 0x22, 0x22, 0x3c, 0x1c, 0x22, 0x20, 0x20, 0x20, 0x22, 0x1c, 0x3c, 0x22, 0x22,
0x22, 0x22, 0x22, 0x3c, 0x3e, 0x20, 0x20, 0x3c, 0x20, 0x20, 0x3e, 0x3e, 0x20, 0x20, 0x3c, 0x20,
0x20, 0x20, 0x1c, 0x22, 0x20, 0x20, 0x2e, 0x22, 0x1e, 0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22,
0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x0e, 0x04, 0x04, 0x04, 0x04, 0x24, 0x18, 0x22, 0x24,
0x28, 0x30, 0x28, 0x24, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3e, 0x22, 0x36, 0x2a, 0x2a,
0x22, 0x22, 0x22, 0x22, 0x32, 0x32, 0x2a, 0x26, 0x26, 0x22, 0x1c, 0x22, 0x22, 0x22, 0x22, 0x22,
0x1c, 0x3c, 0x22, 0x22, 0x3c, 0x20, 0x20, 0x20, 0x1c, 0x22, 0x22, 0x22, 0x2a, 0x24, 0x1a, 0x3c,
0x22, 0x22, 0x3c, 0x28, 0x24, 0x22, 0x1c, 0x22, 0x20, 0x1c, 0x02, 0x22, 0x1c, 0x3e, 0x08, 0x08,
0x08, 0x08, 0x08, 0x08, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x22, 0x22, 0x14,
0x14, 0x08, 0x22, 0x22, 0x22, 0x2a, 0x2a, 0x2a, 0x14, 0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22,
0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x3e, 0x02, 0x04, 0x08, 0x10, 0x20, 0x3e, 0x1c, 0x10,
0x10, 0x10, 0x10, 0x10, 0x1c, 0x20, 0x20, 0x10, 0x08, 0x04, 0x02, 0x02, 0x1c, 0x04, 0x04, 0x04,
0x04, 0x04, 0x1c, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x3e, 0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x04, 0x3c, 0x24, 0x1e, 0x20,
0x20, 0x3c, 0x22, 0x22, 0x22, 0x3c, 0x00, 0x00, 0x1e, 0x20, 0x20, 0x20, 0x1e, 0x02, 0x02, 0x1e,
0x22, 0x22, 0x22, 0x1e, 0x00, 0x00, 0x1c, 0x22, 0x3e, 0x20, 0x1c, 0x0c, 0x12, 0x10, 0x3c, 0x10,
0x10, 0x10, 0xdc, 0x22, 0x22, 0x22, 0x1e, 0x02, 0x1c, 0x20, 0x20, 0x2c, 0x32, 0x22, 0x22, 0x22,
0x00, 0x08, 0x00, 0x08, 0x08, 0x08, 0x1c, 0x84, 0x00, 0x04, 0x04, 0x04, 0x14, 0x08, 0x20, 0x20,
0x24, 0x28, 0x30, 0x28, 0x24, 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00, 0x00, 0x34, 0x2a,
0x2a, 0x2a, 0x2a, 0x00, 0x00, 0x2c, 0x32, 0x22, 0x22, 0x22, 0x00, 0x00, 0x1c, 0x22, 0x22, 0x22,
0x1c, 0xfc, 0x22, 0x22, 0x22, 0x3c, 0x20, 0x20, 0xdc, 0x24, 0x24, 0x24, 0x1c, 0x04, 0x06, 0x00,
0x00, 0x2c, 0x32, 0x20, 0x20, 0x20, 0x00, 0x00, 0x1e, 0x20, 0x1c, 0x02, 0x3c, 0x08, 0x08, 0x1c,
0x08, 0x08, 0x08, 0x04, 0x00, 0x00, 0x22, 0x22, 0x22, 0x26, 0x1a, 0x00, 0x00, 0x22, 0x22, 0x14,
0x14, 0x08, 0x00, 0x00, 0x22, 0x22, 0x2a, 0x2a, 0x14, 0x00, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22,
0xe2, 0x22, 0x22, 0x26, 0x1a, 0x02, 0x1c, 0x00, 0x00, 0x3e, 0x04, 0x08, 0x10, 0x3e, 0x04, 0x08,
0x08, 0x10, 0x08, 0x08, 0x04, 0x08, 0x08, 0x08, 0x00, 0x08, 0x08, 0x08, 0x10, 0x08, 0x08, 0x04,
0x08, 0x08, 0x10, 0x02, 0x1c, 0x20, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xf6, 0x84, 0xc3, 0x83, 0x84
};


////    GLOBAL VARIABLES

BYTE *base;
BYTE blanking_flag=0;
BYTE cmd_ack_counter;
BYTE ddt_mem_page = 0;
BYTE *display_buffer;
BYTE *display_pixel_ptr;
BYTE display_ram[ADVANTAGE_VID_RAM_LEN];        /* ram xlated from adv video RAM format to display-RAM format */
BYTE four_key_reset_enable_flag;
BYTE io_control_reg;
BYTE kbd_char;
BYTE *machine_prom_code;
BYTE motherboard_status = 0;
BYTE parm[MAX_PARAMS][PARM_LEN];
BYTE pb24_data[0xF0000];        // (640 * 256 * 3) * 2
BYTE *pb24_ptr;
BYTE pio_interrupt_mask;
BYTE p_lo;
BYTE p_hi;

BYTE ram[0x40000];
BYTE rgb3_byte[256][8][RGB_BYTES_PER_PIXEL];    /* table converting 1bpp byte-value to 24bpp rgb byte-value */
BYTE rgb_pb_data[0x70800];      /* rgb pixbuf data - 640 * 240 * 3bytes(24bits) per pixel */
BYTE *rgb_pixbuf_data;
BYTE sio_test=0;
BYTE tmpbuff[0x10000];
BYTE *videoram;
BYTE vr_byte;
char work_dir[30];
char aread_name[70];
char *bdata;
char bline[1024];
char bootdisk[TERM_WIDTH_STD];
char	break_string[20];
char cfg_arg[30][128];
char cfg_key[30][20];
char cline[512];
char *cline_ptr;
char *confname;
char confnamebuff[128];
char *cptr;
char datestring[10];
char dbuffer_data[DBUFF_WIDTH * (DBUFF_HEIGHT * 2) / BITS_PER_BYTE];
char env_home[TERM_WIDTH_STD];
char env_logname[TERM_WIDTH_STD];
char env_pwd[128];
char env_shell[TERM_WIDTH_STD];
char eprogname[TERM_WIDTH_STD];
char *file_choice_name;
char filenamebuff[CMD_LEN];
char flags[9];
char hexstring[10];
char line_out[256];
char logfilename[TERM_WIDTH_STD];
char machine_name[TERM_WIDTH_STD];
char machine_prom_name_string[TERM_WIDTH_STD];
char machine_version[TERM_WIDTH_STD];
char mcmd[CMD_LEN];
char namebuff[CMD_LEN];
char outbuff[CMD_LEN];
char pstring[128];
char qchar = 0;
char qqstr[512];
char rc_config[TERM_WIDTH_STD];
char sbuf[80];
char slogfilename[TERM_WIDTH_STD];
char *sptr;
char this_year[10];
char	trap_string[20];
char zo_filename[8][128];
const char *white = " \t";
const GtkTextIter *line_end_iter;
const GtkTextIter *line_start_iter;
const struct timespec pulse = { 0, 100000 };
const struct timeval immediate = { 0, 0 };
FILE *ascii_in = NULL;
FILE *cmd;
FILE *conf;
FILE *fp = NULL;
FILE *logfile;
FILE *slog = NULL;
FILE *zo_f[8] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL };
gchar *fdname;
gchar *port_name;
gchar vstring[128];
GdkDisplay *gdkdisplay;
GdkPixbuf *bannerpb;
gint aread;
gint aread_result;
gint choose_mode;
gint clix =0;
gint debug;
gint fc_disk;
gint fc_result;    /* file chooser result*/
gint file_choice_val;
gint io_port;
gint io_result;
gint xsize=0;		// screensize
GtkBuilder	*builder;
GtkButton	*debugexit;
GtkButton	*exit_button;
GtkButton	*fd1_change;
GtkButton	*fd1_current;
GtkButton	*fd1_eject;
GtkButton	*fd2_change;
GtkButton	*fd2_current;
GtkButton	*fd2_eject;
GtkButton	*h1button;
GtkButton	*h2button;
GtkButton	*h3button;
GtkButton	*h4button;
GtkButton	*h5button;
GtkButton	*h6button;
GtkButton	*hdd_change;
GtkButton	*hdd_current;
GtkButton	*hdd_eject;
GtkButton	*hunused;
GtkButton	*memhidebutton;
GtkButton	*new_floppy_button;
GtkButton	*p1button;
GtkButton	*p2button;
GtkButton	*p3button;
GtkButton	*p4button;
GtkButton	*p5button;
GtkButton	*p6button;
GtkButton	*pio_in_change;
GtkButton	*pio_in_current;
GtkButton	*pio_in_detach;
GtkButton	*pio_out_change;
GtkButton	*pio_out_current;
GtkButton	*pio_out_detach;
GtkButton	*punused;
GtkButton	*s1button;
GtkButton	*s2button;
GtkButton	*s3button;
GtkButton	*s4button;
GtkButton	*s5button;
GtkButton	*s6button;
GtkButton	*sio_in_change;
GtkButton	*sio_in_current;
GtkButton	*sio_in_detach;
GtkButton	*sio_out_change;
GtkButton	*sio_out_current;
GtkButton	*sio_out_detach;
GtkButton       *size_end;
GtkButton	*sunused;
GtkCheckButton	*break_enable;
GtkCheckButton	*dcb001;
GtkCheckButton	*dcb002;
GtkCheckButton	*dcb004;
GtkCheckButton	*dcb008;
GtkCheckButton	*dcb010;
GtkCheckButton	*dcb020;
GtkCheckButton	*dcb040;
GtkCheckButton	*dcb080;
GtkCheckButton	*dcb100;
GtkCheckButton	*dcb1000;
GtkCheckButton	*dcb200;
GtkCheckButton	*dcb2000;
GtkCheckButton	*dcb400;
GtkCheckButton	*dcb4000;
GtkCheckButton	*dcb800;
GtkCheckButton	*dcb8000;
GtkCheckButton	*trap_enable;
GtkEntry	*break_entry;
GtkEntry	*debugvalue;
GtkEntry	*new_floppy_text;
GtkEntry	*trap_entry;
GtkImage	*ade_win;
GtkLabel	*break_label;
GtkLabel	*fd1fn;
GtkLabel	*fd2fn;
GtkLabel	*hdc_label;
GtkLabel	*hdfn;
GtkLabel	*pio_dev_fn;
GtkLabel	*pio_in_fn;
GtkLabel	*pio_label;
GtkLabel	*pio_out_fn;
GtkLabel	*sio_dev_fn;
GtkLabel	*sio_in_fn;
GtkLabel	*sio_label;
GtkLabel	*sio_out_fn;
GtkLabel	*trap_label;
GtkMenuBar	*settings;
GtkRadioButton  *screensize1button;
GtkRadioButton  *screensize2button;
GtkRadioButton  *screensize3button;
GtkScrolledWindow *memscrl;
GtkScrolledWindow	*winstatusscroll;
GtkTextBuffer	*mem_buffer;
GtkTextBuffer	*status_buffer;
GtkTextIter	mem_end_iter;
GtkTextIter	status_end_iter;
GtkTextView	*memtext;
GtkTextView	*statusinfo;
GtkWidget	*Wade_win;
GtkWidget	*Wbreak_enable;
GtkWidget	*Wbreak_entry;
GtkWidget	*Wbreak_label;
GtkWidget	*Wbreak_top;
GtkWidget	*Wdcb001;
GtkWidget	*Wdcb002;
GtkWidget	*Wdcb004;
GtkWidget	*Wdcb008;
GtkWidget	*Wdcb010;
GtkWidget	*Wdcb020;
GtkWidget	*Wdcb040;
GtkWidget	*Wdcb080;
GtkWidget	*Wdcb100;
GtkWidget	*Wdcb1000;
GtkWidget	*Wdcb200;
GtkWidget	*Wdcb2000;
GtkWidget	*Wdcb400;
GtkWidget	*Wdcb4000;
GtkWidget	*Wdcb800;
GtkWidget	*Wdcb8000;
GtkWidget	*Wdebugexit;
GtkWidget	*Wdebugtop;
GtkWidget	*Wdebugvalue;
GtkWidget	*Wdisks_top;
GtkWidget	*Wexit_button;
GtkWidget	*Wfd1_change;
GtkWidget	*Wfd1_current;
GtkWidget	*Wfd1_eject;
GtkWidget	*Wfd1fn;
GtkWidget	*Wfd2_change;
GtkWidget	*Wfd2_current;
GtkWidget	*Wfd2_eject;
GtkWidget	*Wfd2fn;
GtkWidget	*Wh1button;
GtkWidget	*Wh2button;
GtkWidget	*Wh3button;
GtkWidget	*Wh4button;
GtkWidget	*Wh5button;
GtkWidget	*Wh6button;
GtkWidget	*Whdc_label;
GtkWidget	*Whdd_change;
GtkWidget	*Whdd_current;
GtkWidget	*Whdd_eject;
GtkWidget	*Whdfn;
GtkWidget	*Whunused;
GtkWidget	*Wioports_top;
GtkWidget	*Wmemhidebutton;
GtkWidget *Wmemscrl;
GtkWidget	*Wmemtext;
GtkWidget	*Wmemtw;
GtkWidget	*Wnew_floppy_button;
GtkWidget	*Wnew_floppy_text;
GtkWidget	*Wp1button;
GtkWidget	*Wp2button;
GtkWidget	*Wp3button;
GtkWidget	*Wp4button;
GtkWidget	*Wp5button;
GtkWidget	*Wp6button;
GtkWidget	*Wpio_dev_change;
GtkWidget	*Wsio_dev_change;
GtkWidget	*Wpio_in_change;
GtkWidget	*Wpio_in_current;
GtkWidget	*Wsio_dev_detach;
GtkWidget	*Wpio_dev_detach;
GtkWidget	*Wpio_in_detach;
GtkWidget	*Wpio_in_fn;
GtkWidget	*Wpio_label;
GtkWidget	*Wpio_out_change;
GtkWidget	*Wpio_out_current;
GtkWidget	*Wpio_out_detach;
GtkWidget	*Wpio_out_fn;
GtkWidget	*Wpunused;
GtkWidget	*Ws1button;
GtkWidget	*Ws2button;
GtkWidget	*Ws3button;
GtkWidget	*Ws4button;
GtkWidget	*Ws5button;
GtkWidget	*Ws6button;
GtkWidget	*Wscreensize1button;
GtkWidget	*Wscreensize2button;
GtkWidget	*Wscreensize3button;
GtkWidget	*Wsettings;
GtkWidget	*Wsio_in_change;
GtkWidget	*Wsio_in_current;
GtkWidget	*Wsio_in_detach;
GtkWidget	*Wsio_in_fn;
GtkWidget	*Wsio_dev_fn;
GtkWidget	*Wpio_dev_fn;
GtkWidget	*Wsio_label;
GtkWidget	*Wsio_out_change;
GtkWidget	*Wsio_out_current;
GtkWidget	*Wsio_out_detach;
GtkWidget	*Wsio_out_fn;
GtkWidget	*Wsize_end;
GtkWidget	*Wsize_top;
GtkWidget	*Wslottop;
GtkWidget	*Wstatusinfo;
GtkWidget	*Wsunused;
GtkWidget	*Wtrap_enable;
GtkWidget	*Wtrap_entry;
GtkWidget	*Wtrap_label;
GtkWidget	*Wwindow;
GtkWidget	*Wwinstatusscroll;
GtkWindow	*break_top;
GtkWindow	*disks_top;
GtkWindow	*ioports_top;
GtkWindow *memtw;
GtkWindow	*window;
int ascii = 0;
int auto_repeat;
int blank_display=0;
int break_active=0;
int break_wait=0;
int ade_shift_flag=0;
int ade_control_flag=0;
int ade_cmd_flag=0;
int capslock = 0;
int capslock_start =0;
int capslock_end=0;
int cursor_lock = 0;
int char_overrun;
int charwait=0;
int cmd_ack=0;
int cmd_end_flag;
int col = 0;
int coldboot_flag = 0;
int current_disk = 0;
int display_flag;
int ade_meta_flag=0;
int examine_flag = 0;
int fdc_card=8;
int floppy_pulse_flag=0;
int hdcslot = 0;                // 0 signifies unused
gboolean hd_delay = FALSE;
int hd_sync = 0;
int hd_unit = 0;
int interrupt_mode = 0;
int interrupt_req_flag = 0;
int io_interrupt;
int ascii_eol = 0;
int kbd_data_flag;
int kbd_interrupt;
int keyboard_active=0;
int keybrdin_int=0;
int location;
int machine_floppy_max;
int machine_hd_max;
int machine_reset_flag=0;
int max_cfg_key;
int memory_mapping_register[4];
int microtick = 1;
int native_flags = 0;
int no_boot_disk = 1;
int non_mask_interrupt;
int noprefix_flag;
int numlock_start=0;
int numlock_end=0;
int ok;
int pio_in_ack;
int pio_input_flag;
int pio_out_ack;
int pio_output_flag;
int pioslot = 0;
int prom_active=0;
int q;
int row = 0;
int rtc_int=0;
int rtc_interval = 0xC000;
int rtclock_int_enabled;
int rtclock_tick_flag;
int scanline=0;
int show_windows=1;
int sioslot = 0;
int started=0;
int stopsim = 0;
int term_slow = 0;
int term_type = 0;
int term_width = TERM_WIDTH_STD;
int timer_interrupt_active=0;
int trap_active=0;
int warn_boot_floppy = 1;
int x;
int xnum;
int ynum;
int zo_flen[8];
long loadadr = 0;
PangoFontDescription *mono_font;
struct CPU cpu;
struct CPU *cpux;
struct fixed_disk *hd5;
struct fixed_disk nshd;
struct kbdq *advq;
struct kbdq kqueue[2];
struct kbdq *memq;
struct peripheral slot[7];
struct peripheral *slotx;
struct removable_disk *floppy;
struct removable_disk nsd[MACHINE_FLOPPY_MAX];
struct timespec rem;
struct termios sio_raw;
struct termios sio_cooked;
struct termios pio_raw;
struct termios pio_cooked;
unsigned char x2gchar[MAXCHARS][2];
unsigned char *xptr;
unsigned int aread_clock=0;
unsigned int break_address= 0x1ffff;
unsigned int display_len;
unsigned int dots_per_pixel;
unsigned int mem_state;
unsigned int msize = 0;
unsigned int msize64 = 0x10000;
unsigned int rgb_page_offset;
unsigned int rgb_pixbuf_data_len;
unsigned int trap_address= 0x1ffff;
unsigned int x_dots_per_pixel;
unsigned int xlt[16];
unsigned int xlt_addr[ADVANTAGE_VID_RAM_LEN];   /* table converting RAM address to display address (still 1 bpp) */
unsigned int y_dots_per_pixel;
WORD break_dbg;
WORD display_flag_counter;
WORD floppy_controller_clock=0;
WORD hdseek_delay;
WORD IFF;
WORD interrupt_newpc = 0;
WORD machine_prom_address;
WORD machine_prom_length;
WORD prom_base = 0;
WORD rom_end = 0;
WORD vector = 0;

char nc_logfilename[64];
FILE *nc_log = NULL;

char xconfigfilename[64];
int configfileflag=0;

BYTE *pio_character_buff_ptr = NULL;
BYTE *sio_character_buff_ptr = NULL;
unsigned int pio_icptr=0;
unsigned int sio_icptr=0;
unsigned int pio_ocptr=0;
unsigned int sio_ocptr=0;
int z80_active = 0;
BYTE diskname[25];
BYTE fnbuff[128];
BYTE portname[25];
char *portwholename;
char *portbasename;

unsigned char adv_kbd_scancodes[0xA0][0x07] = {
/*

 hkc   hardware keycode - PC            = 0x26
 lock  capslock, numlock, none          = 0x01 (Can use CAPSLOCK)
 just  just the key itself     e.g. 'a' = 0x61
 shift the key when shifted         'A' = 0x41
 ctrl  the key when control        '^A' = 0x01
 C+s   both control and shift      '^A' = 0x01
 ahkc  advantage hardware keycode       =  38 (dec.)

 ***   keys which differ in upper-lower case modes between PC and Advantage
  @    keys which have shift-keys altered to be same as lower-case

 value 0xFF signifies NO output

*/

/* hkc     lock  just  shift ctrl  c+s   cmd   ahkc */
/* 00 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },  //unused - zero-based index
/* 01 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 02 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 03 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 04 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 05 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 06 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 07 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 08 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 09 */  { 0x00, 0x1B, 0x1B, 0x1B, 0x1B, 0xFF, 19 },  // ESC
/* 0A */  { 0x00, 0x31, 0x21, 0x31, 0x21, 0xFF,  3 },  // 1  !
/* 0B */  { 0x00, 0x32, 0x40, 0x32, 0x00, 0xFF,  4 },  // 2  @
/* 0C */  { 0x00, 0x33, 0x23, 0x33, 0x23, 0xFF,  5 },  // 3  #
/* 0D */  { 0x00, 0x34, 0x24, 0x34, 0x24, 0xFF,  6 },  // 4  \$
/* 0E */  { 0x00, 0x35, 0x25, 0x35, 0x25, 0xFF,  7 },  // 5  \%
/* 0F */  { 0x00, 0x36, 0x5E, 0x36, 0x1E, 0xFF,  8 },  // 6  ^
/* 10 */  { 0x00, 0x37, 0x26, 0x37, 0x26, 0xFF,  9 },  // 7  &
/* 11 */  { 0x00, 0x38, 0x2A, 0x38, 0x2A, 0xFF, 10 },  // 8  *
/* 12 */  { 0x00, 0x39, 0x28, 0x39, 0x28, 0xFF, 11 },  // 9  (
/* 13 */  { 0x00, 0x30, 0x29, 0x30, 0x29, 0xFF, 12 },  // 0  )
/* 14 */  { 0x00, 0x2D, 0x5F, 0x2D, 0x1F, 0xFF, 13 },  // -  _
/* 15 */  { 0x00, 0x3D, 0x2B, 0x3D, 0x2B, 0xFF, 14 },  // =  +
/* 16 */  { 0x00, 0x7F, 0x7F, 0x7F, 0x7F, 0xFF, 15 },  // DEL
/* 17 */  { 0x00, 0x09, 0x09, 0x09, 0x09, 0xFF, 20 },  // TAB
/* 18 */  { 0x01, 0x71, 0x51, 0x11, 0x11, 0xD1, 21 },  // Q
/* 19 */  { 0x01, 0x77, 0x57, 0x17, 0x17, 0xD7, 22 },  // W
/* 1A */  { 0x01, 0x65, 0x45, 0x05, 0x05, 0xc5, 23 },  // E
/* 1B */  { 0x01, 0x72, 0x52, 0x12, 0x12, 0xD2, 24 },  // R
/* 1C */  { 0x01, 0x74, 0x54, 0x14, 0x14, 0xD4, 25 },  // T
/* 1D */  { 0x01, 0x79, 0x59, 0x19, 0x19, 0xD9, 26 },  // Y
/* 1E */  { 0x01, 0x75, 0x55, 0x15, 0x15, 0xD5, 27 },  // U
/* 1F */  { 0x01, 0x69, 0x49, 0x09, 0x09, 0xc9, 28 },  // I
/* 20 */  { 0x01, 0x6F, 0x4F, 0x0F, 0x0F, 0xCF, 29 },  // O
/* 21 */  { 0x01, 0x70, 0x50, 0x10, 0x10, 0xD0, 30 },  // P
/* 22 */  { 0x00, 0x5B, 0x7B, 0x1B, 0x7B, 0xFF, 31 },  // [  {
/* 23 */  { 0x00, 0x5D, 0x7D, 0x1D, 0x7D, 0xFF, 32 },  // ]  }
/* 24 */  { 0x00, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 49 },  // RETURN
/* 25 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 37 },  // CTRL L
/* 26 */  { 0x01, 0x61, 0x41, 0x01, 0x01, 0xc1, 38 },  // A
/* 27 */  { 0x01, 0x73, 0x53, 0x13, 0x13, 0xD3, 39 },  // S
/* 28 */  { 0x01, 0x64, 0x44, 0x04, 0x04, 0xc4, 40 },  // D
/* 29 */  { 0x01, 0x66, 0x46, 0x06, 0x06, 0xc6, 41 },  // F
/* 2A */  { 0x01, 0x67, 0x47, 0x07, 0x07, 0xc7, 42 },  // G
/* 2B */  { 0x01, 0x68, 0x48, 0x08, 0x08, 0xc8, 43 },  // H
/* 2C */  { 0x01, 0x6A, 0x4A, 0x0A, 0x0A, 0xCA, 44 },  // J
/* 2D */  { 0x01, 0x6B, 0x4B, 0x0B, 0x0B, 0xCB, 45 },  // K
/* 2E */  { 0x01, 0x6C, 0x4C, 0x0C, 0x0C, 0xCC, 46 },  // L
/* 2F */  { 0x00, 0x3B, 0x3A, 0x3B, 0x3A, 0xFF, 47 },  // colon semicolon
/* 30 */  { 0x00, 0x27, 0x22, 0x27, 0x22, 0xFF, 48 },  // \"  \'
/* 31 */  { 0x00, 0x60, 0x7e, 0x60, 0x7e, 0xff, 01 },  // ` ~   ***
/* 32 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 54 },  // SHIFT L
/* 33 */  { 0x00, 0x5C, 0x7C, 0x1C, 0x7C, 0xFF, 02 },  // \  |  ***
/* 34 */  { 0x00, 0x7A, 0x5A, 0x1A, 0x1A, 0xDA, 55 },
/* 35 */  { 0x01, 0x78, 0x58, 0x18, 0x18, 0xD8, 56 },  // X
/* 36 */  { 0x01, 0x63, 0x43, 0x03, 0x03, 0xc3, 57 },  // C
/* 37 */  { 0x01, 0x76, 0x56, 0x16, 0x16, 0xD6, 58 },  // V
/* 38 */  { 0x01, 0x62, 0x42, 0x02, 0x02, 0xc2, 59 },  // B
/* 39 */  { 0x01, 0x6E, 0x4E, 0x0E, 0x0E, 0xCE, 60 },  // N
/* 3A */  { 0x01, 0x6D, 0x4D, 0x0D, 0x0D, 0xCD, 61 },  // M
/* 3B */  { 0x00, 0x2C, 0x3C, 0x2C, 0x3C, 0xFF, 62 },  // ,  <
/* 3C */  { 0x00, 0x2E, 0x3E, 0x2E, 0x3E, 0xFF, 63 },  // .  >
/* 3D */  { 0x00, 0x2F, 0x3F, 0x2F, 0x3F, 0xFF, 64 },  // /  ?
/* 3E */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 65 },  // SHIFT R
/* 3F */  { 0x02, 0x2C, 0x2C, 0x2C, 0x2C, 0x2c, 86 },  // K-COMMA @
/* 40 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 36 },  // ALT_L
/* 41 */  { 0x00, 0x20, 0x20, 0x20, 0x20, 0xFF, 69 },  // SPACE
/* 42 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 53 },  // CAPSLOCK
/* 43 */  { 0x00, 0xDB, 0xEA, 0xDB, 0xEA, 0x9B, 70 },  // F1
/* 44 */  { 0x00, 0xDC, 0xEB, 0xDC, 0xEB, 0x9C, 71 },  // F2
/* 45 */  { 0x00, 0xDD, 0xEC, 0xDD, 0xEC, 0x9D, 72 },  // F3
/* 46 */  { 0x00, 0xDE, 0xED, 0xDE, 0xED, 0x9E, 73 },  // F4
/* 47 */  { 0x00, 0xDF, 0xEE, 0xDF, 0xEE, 0x9F, 74 },  // F5
/* 48 */  { 0x00, 0xE0, 0xEF, 0xE0, 0xEF, 0xA0, 75 },  // F6
/* 49 */  { 0x00, 0xE1, 0xF0, 0xE1, 0xF0, 0xA1, 76 },  // F7
/* 4A */  { 0x00, 0xE2, 0xF1, 0xE2, 0xF1, 0xA2, 77 },  // F8
/* 4B */  { 0x00, 0xE3, 0xF2, 0xE3, 0xF2, 0xA3, 78 },  // F9
/* 4C */  { 0x00, 0xE4, 0xF3, 0xE4, 0xF3, 0xA4, 79 },  // F10
/* 4D */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 87 },  // NUMLOCK (Cursor Lock)
/* 4E */  { 0x00, 0xE8, 0xF7, 0xE8, 0xF7, 0xA8, 83 },  // F14
/* 4F */  { 0x02, 0x37, 0x87, 0xB7, 0x97, 0xBC, 16 },  // K-7
/* 50 */  { 0x02, 0x38, 0x82, 0xB8, 0x98, 0xBD, 17 },  // K-8
/* 51 */  { 0x02, 0x39, 0x89, 0xB9, 0x99, 0xBE, 18 },  // K-9
/* 52 */  { 0x02, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 85 },  // K-MINUS @
/* 53 */  { 0x02, 0x34, 0x88, 0xB4, 0x94, 0xFD, 33 },  // K-4
/* 54 */  { 0x02, 0x35, 0x85, 0xB5, 0x95, 0xBA, 34 },  // K-5
/* 55 */  { 0x02, 0x36, 0x86, 0xB6, 0x96, 0xBB, 35 },  // K-6
/* 56 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },  // K-PLUS
/* 57 */  { 0x02, 0x31, 0x84, 0xB1, 0x91, 0xFA, 50 },  // K-1
/* 58 */  { 0x02, 0x32, 0x8A, 0xB2, 0x92, 0xFB, 51 },  // K-2
/* 59 */  { 0x02, 0x33, 0x83, 0xB3, 0x93, 0xFC, 52 },  // K-3
/* 5A */  { 0x02, 0x30, 0x30, 0x30, 0x30, 0x30, 66 },  // K-0 @
/* 5B */  { 0x02, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 67 },  // K-PERIOD @
/* 5C */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 5D */  { 0x00, 0x5D, 0x7D, 0x1D, 0x7D, 0xFF,  0 },
/* 5E */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 5F */  { 0x00, 0xE5, 0xF4, 0xE5, 0xF4, 0xA5, 80 },  // F11
/* 60 */  { 0x00, 0xE6, 0xF5, 0xE6, 0xF5, 0xA6, 81 },  // F12
/* 61 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 62 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 63 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 64 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 65 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 66 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 67 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 68 */  { 0x00, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 68 },  // K-ENTER @
/* 69 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },  // CTRL R
/* 6A */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 6B */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 6C */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },  // ALT R
/* 6D */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 6E */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },  // Home
/* 6F */  { 0x00, 0x82, 0x82, 0x82, 0x82, 0xFF,  0 },  // up arrow
/* 70 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },  // Page Up
/* 71 */  { 0x00, 0x88, 0x88, 0x88, 0x88, 0xFF,  0 },  // left arrow
/* 72 */  { 0x00, 0x86, 0x86, 0x86, 0x86, 0xFF,  0 },  // right arrow
/* 73 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },  // End
/* 74 */  { 0x00, 0x8A, 0x8A, 0x8A, 0x8A, 0xFF,  0 },   // down arrow
/* 75 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },   // Page Down
/* 76 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },	// Insert
/* 77 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },   // Delete
/* 78 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 79 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 7A */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 7B */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 7C */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 7D */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 7E */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 7F */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 80 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 81 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 82 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 83 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 84 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 85 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },  // WIN L
/* 86 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },  // WIN R
/* 87 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },  // PAGE R
/* 88 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 89 */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 8A */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 8B */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 8C */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 8D */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 8E */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 8F */  { 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  0 },
/* 90 */  { 0x00, 0xAD, 0x2D, 0x8F, 0x8F, 0x80, 85 }, // KCL-MINUS  = CL-MINUS
/* 91 */  { 0x00, 0xAC, 0x2C, 0x8C, 0x8C, 0xAB, 86 }, // KCL-COMMA  = CL-COMMA
/* 92 */  { 0x00, 0x87, 0x37, 0xB7, 0x97, 0xBC, 16 }, // KCL-7      = CL-NORTH_WEST
/* 93 */  { 0x00, 0x82, 0x38, 0xB8, 0x98, 0xBD, 17 }, // KCL-8      = CL-NORTH, UP ARROW
/* 94 */  { 0x00, 0x89, 0x39, 0xB9, 0x99, 0xBE, 18 }, // KCL-9      = CL-NORTH_EAST
/* 95 */  { 0x00, 0x88, 0x34, 0xB4, 0x94, 0xFD, 33 }, // KCL-4      = CL-WEST, LEFT ARROW
/* 96 */  { 0x00, 0x85, 0x35, 0xB5, 0x95, 0xBA, 34 }, // KCL-5      = CL-NONE, NONE
/* 97 */  { 0x00, 0x86, 0x36, 0xB6, 0x96, 0xBB, 35 }, // KCL-6      = CL-EAST, RIGHT ARROW
/* 98 */  { 0x00, 0x84, 0x31, 0xB1, 0x91, 0xFA, 50 }, // KCL-1      = CL-SOUTH_WEST
/* 99 */  { 0x00, 0x8A, 0x32, 0xB2, 0x92, 0xFB, 51 }, // KCL-2      = CL-SOUTH, DOWN ARROW
/* 9A */  { 0x00, 0x83, 0x33, 0xB3, 0x93, 0xFC, 52 }, // KCL-3      = CL-SOUTH_EAST
/* 9B */  { 0x00, 0xB0, 0x30, 0x90, 0x90, 0xC0, 66 }, // KCL-0      = CL-0
/* 9C */  { 0x00, 0xAE, 0x2E, 0x8E, 0x8E, 0x81, 67 }, // KCL-PERIOD = CL-PERIOD
/* 9D */  { 0x00, 0xE7, 0xF6, 0xE7, 0xF6, 0xA7, 82 }, // WIN F13
/* 9E */  { 0x00, 0xE8, 0xF7, 0xE8, 0xF7, 0xA8, 83 }, // WIN F14
/* 9F */  { 0x00, 0xE9, 0xF8, 0xE9, 0xF8, 0xA9, 84 }  // WIN F15
};

